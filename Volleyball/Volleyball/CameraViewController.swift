//
//  CameraViewController.swift
//  Volleyball
//
//  Created by Brian Malsan on 2/19/19.
//  Copyright Â© 2019 Brian Malsan. All rights reserved.
//

import UIKit
import CoreML
import Vision
import AVFoundation

class CameraViewController: UIViewController, AVCaptureVideoDataOutputSampleBufferDelegate{

    
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    @IBOutlet var numberLabel: UILabel!
    var previewLayer: AVCaptureVideoPreviewLayer?
    
    
    enum modelError:Error{
        case modelDidNotLoad
    }
   
    override func viewDidLoad(){
        super.viewDidLoad()
        configureCamera()
    }
    
    func configureCamera(){
        //Start capture session
        let captureSession = AVCaptureSession()
        captureSession.sessionPreset = .photo
        captureSession.startRunning()
        
        // Add input for capture
        guard let captureDevice = AVCaptureDevice.default(for: .video) else { return }
        guard let captureInput = try? AVCaptureDeviceInput(device: captureDevice) else { return }
        captureSession.addInput(captureInput)
        
        // Add preview layer
        self.previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        self.previewLayer?.videoGravity = AVLayerVideoGravity.resizeAspectFill
        self.previewLayer?.connection?.videoOrientation = .portrait
        
        view.layer.insertSublayer(self.previewLayer!, at: 0)
        self.previewLayer?.frame = view.frame
        
        // Add output for capture
        let dataOutput = AVCaptureVideoDataOutput()
        dataOutput.setSampleBufferDelegate(self, queue: DispatchQueue(label: "videoQueue"))
        captureSession.addOutput(dataOutput)
    }
    
    func captureOutput(_ output: AVCaptureOutput, didOutput sampleBuffer: CMSampleBuffer, from connection: AVCaptureConnection){
        
        // Initialise CVPixelBuffer from sample buffer
        guard let pixelBuffer: CVPixelBuffer = CMSampleBufferGetImageBuffer(sampleBuffer) else { return }
        
        //Initialise Core ML model
        guard let MNISTModel = try? VNCoreMLModel(for: MNISTClassifier().model) else { print("Error: Could not create vision model");return }
        //let MNISTModel = try VNCoreMLModel(for: MNISTClassifier().model)
        
        
        print("Hello")
        // Create a Core ML Vision request
        let request =  VNCoreMLRequest(model: MNISTModel) { (finishedRequest, err) in
            
            // Dealing with the result of the Core ML Vision request
            
            guard let results = finishedRequest.results as? [VNClassificationObservation] else { return }
            
            guard let firstResult = results.first else { return }
            print(firstResult.identifier)
            
            DispatchQueue.main.async {
                
                self.numberLabel.text = firstResult.identifier
            }
        }
        
        // Perform the above request using Vision Image Request Handler
        try? VNImageRequestHandler(cvPixelBuffer: pixelBuffer, options: [:]).perform([request])
    }

    
}

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destination.
        // Pass the selected object to the new view controller.
    }
    */


